#!/bin/bash

# exit when any command fails
set -e

DEBIAN_FRONTEND=noninteractive

# create a tun device
mkdir -p /dev/net
mknod /dev/net/tun c 10 200
chmod 600 /dev/net/tun

: ${GOST_ARGS:="-L :1080"}

function start_gost_if_need() {
  if pgrep -x "gost" >/dev/null; then
    return
  fi

  # start the proxy
  nohup gost $GOST_ARGS >/dev/null 2>&1 &
  # nohup gost $GOST_ARGS > /dev/null &
  # nohup gost $GOST_ARGS &

  # nohup gost -F=socks5://127.0.0.1:4000 $GOST_ARGS >/dev/null 2>&1 &
}

function register_if_need() {
  if [ -f /var/lib/cloudflare-warp/reg.json ]; then
    return
  fi

  # if /var/lib/cloudflare-warp/reg.json not exists, register the warp client
  warp-cli register && echo "Warp client registered!"
  # if a license key is provided, register the license
  if [ -n "$WARP_LICENSE_KEY" ]; then
    echo "License key found, registering license..."
    warp-cli set-license "$WARP_LICENSE_KEY" && echo "Warp license registered!"
  fi
}

function wait_for_warp_ready() {

  echo -e "\n\n------------------------------"
  echo "Waiting for WARP service..."
  echo -e "------------------------------\n\n"

  sleep 1

  while true; do

    if ! warp-cli status >/dev/null 2>&1; then

      sleep 1
      continue

    fi

    break

  done

  echo -e "\n\n------------------------------"
  echo "WARP service started!"
  echo -e "------------------------------\n\n"
}

function run_after_warp_ready() {
  wait_for_warp_ready

  register_if_need

  # warp-cli set-proxy-port 4000
  # warp-cli set-mode proxy

  warp-cli set-mode warp

  warp-cli connect
}

#########################################################

start_gost_if_need

run_after_warp_ready &

warp-svc | grep -v DEBUG
